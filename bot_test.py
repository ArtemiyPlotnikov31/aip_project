import pytest
from unittest.mock import AsyncMock
import aiogram
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton

import tg_bot


@pytest.mark.asyncio
async def test_start_command():
    # –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
    button_temperature = KeyboardButton(text='/Temperature')
    button_details = KeyboardButton(text='/Details')
    button_time = KeyboardButton(text='/Time')
    keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add(button_temperature)
    keyboard.add(button_details)
    keyboard.add(button_time)
    # –º–æ–∫–∞–µ–º –±–æ—Ç–∞
    state = AsyncMock()
    message = AsyncMock()
    message.text = "/start"
    # –∑–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç
    await tg_bot.start_command(message, state)
    # –ø—Ä–æ–≤–µ—Ä—è–µ–º
    message.reply.assert_called_once_with(
        "–ü—Ä–∏–≤–µ—Ç, —è –ø–æ–º–æ–≥—É —Ç–µ–±–µ —É–∑–Ω–∞—Ç—å –ø–æ–≥–æ–¥—É –≤ —Ç–≤–æ–µ–º –≥–æ—Ä–æ–¥–µ! ‚õàÔ∏è\n\n\
        üå°Ô∏è –ß—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—É –≤ —Å–≤–æ–µ–º –≥–æ—Ä–æ–¥–µ –Ω–∞–∂–º–∏ /Temperature\n\
        üìù –ß—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω—ã–π –ø—Ä–æ–≥–Ω–æ–∑, –Ω–∞–∂–º–∏ /Details\n\
        üïë –ß—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –¥–Ω—è, –Ω–∞–∂–º–∏ /Time",
        reply_markup=keyboard)


@pytest.mark.asyncio
async def test_temperature_command():
    # –º–æ–∫–∞–µ–º –±–æ—Ç–∞
    state = AsyncMock()
    message = AsyncMock()
    message.text = "/Temperature"
    aiogram.bot.Bot.send_message = AsyncMock()
    # –∑–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç
    await tg_bot.get_weather(message, state)
    # –ø—Ä–æ–≤–µ—Ä—è–µ–º
    aiogram.bot.Bot.send_message.assert_called_once_with(
        message.chat.id,
        "üåÜ –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞:")


@pytest.mark.asyncio
async def test_details_command():
    # –º–æ–∫–∞–µ–º –±–æ—Ç–∞
    state = AsyncMock()
    message = AsyncMock()
    message.text = "/Details"
    aiogram.bot.Bot.send_message = AsyncMock()
    # –∑–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç
    await tg_bot.get_details(message, state)
    # –ø—Ä–æ–≤–µ—Ä—è–µ–º
    aiogram.bot.Bot.send_message.assert_called_once_with(
        message.chat.id,
        "üåÜ –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞:")


@pytest.mark.asyncio
async def test_time_command():
    # –º–æ–∫–∞–µ–º –±–æ—Ç–∞
    state = AsyncMock()
    message = AsyncMock()
    message.text = "/Time"
    aiogram.bot.Bot.send_message = AsyncMock()
    # –∑–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç
    await tg_bot.get_time(message, state)
    # –ø—Ä–æ–≤–µ—Ä—è–µ–º
    aiogram.bot.Bot.send_message.assert_called_once_with(
        message.chat.id,
        "üåÜ –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞:")


@pytest.mark.asyncio
async def test_get_temp_by_city():
    # –º–æ–∫–∞–µ–º –±–æ—Ç–∞
    state = AsyncMock()
    message = AsyncMock()
    message.text = "Moscow"
    aiogram.bot.Bot.send_message = AsyncMock()
    # –∑–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç
    await tg_bot.get_temp_by_city(message, state)
    # –ø—Ä–æ–≤–µ—Ä—è–µ–º
    message.reply.assert_called_once()


@pytest.mark.asyncio
async def test_get_temp_by_city_bad():
    # –º–æ–∫–∞–µ–º –±–æ—Ç–∞
    state = AsyncMock()
    message = AsyncMock()
    message.text = "123456"
    aiogram.bot.Bot.send_message = AsyncMock()
    # –∑–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç
    await tg_bot.get_temp_by_city(message, state)
    # –ø—Ä–æ–≤–µ—Ä—è–µ–º
    message.reply.assert_called_once_with("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –Ω–∞–ø–∏—Å–∞–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è –≥–æ—Ä–æ–¥–∞.")


@pytest.mark.asyncio
async def test_get_details_by_city():
    # –º–æ–∫–∞–µ–º –±–æ—Ç–∞
    state = AsyncMock()
    message = AsyncMock()
    message.text = "Moscow"
    aiogram.bot.Bot.send_message = AsyncMock()
    # –∑–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç
    await tg_bot.get_details_by_city(message, state)
    # –ø—Ä–æ–≤–µ—Ä—è–µ–º
    message.reply.assert_called_once()


@pytest.mark.asyncio
async def test_get_details_by_city_bad():
    # –º–æ–∫–∞–µ–º –±–æ—Ç–∞
    state = AsyncMock()
    message = AsyncMock()
    message.text = "123456"
    aiogram.bot.Bot.send_message = AsyncMock()
    # –∑–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç
    await tg_bot.get_details_by_city(message, state)
    # –ø—Ä–æ–≤–µ—Ä—è–µ–º
    message.reply.assert_called_once_with("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –Ω–∞–ø–∏—Å–∞–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è –≥–æ—Ä–æ–¥–∞.")


@pytest.mark.asyncio
async def test_get_time_by_city():
    # –º–æ–∫–∞–µ–º –±–æ—Ç–∞
    state = AsyncMock()
    message = AsyncMock()
    message.text = "Moscow"
    aiogram.bot.Bot.send_message = AsyncMock()
    # –∑–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç
    await tg_bot.get_time_by_city(message, state)
    # –ø—Ä–æ–≤–µ—Ä—è–µ–º
    message.reply.assert_called_once()


@pytest.mark.asyncio
async def test_get_time_by_city_bad():
    # –º–æ–∫–∞–µ–º –±–æ—Ç–∞
    state = AsyncMock()
    message = AsyncMock()
    message.text = "123456"
    aiogram.bot.Bot.send_message = AsyncMock()
    # –∑–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç
    await tg_bot.get_time_by_city(message, state)
    # –ø—Ä–æ–≤–µ—Ä—è–µ–º
    message.reply.assert_called_once_with("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –Ω–∞–ø–∏—Å–∞–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è –≥–æ—Ä–æ–¥–∞.")