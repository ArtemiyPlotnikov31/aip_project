import requests
import datetime
from config import tg_bot_token, open_weather_token
from aiogram import Bot, types
from aiogram.dispatcher import Dispatcher
from aiogram.utils import executor
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.dispatcher.dispatcher import FSMContext
from aiogram.contrib.fsm_storage.memory import MemoryStorage

bot = Bot(token=tg_bot_token)
dp = Dispatcher(bot, storage=MemoryStorage())


class WeatherType(StatesGroup):
    temperature = State()
    details = State()
    time = State()


@dp.message_handler(commands=["start"])
async def start_command(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start

    Args:
        message (types.Message): —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        state (FSMContext): —Å–æ—Å—Ç–æ—è–Ω–∏–µ –±–æ—Ç–∞
    """
    button_temperature = KeyboardButton(text='/Temperature')
    button_details = KeyboardButton(text='/Details')
    button_time = KeyboardButton(text='/Time')
    keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add(button_temperature)
    keyboard.add(button_details)
    keyboard.add(button_time)
    await message.reply(
        "–ü—Ä–∏–≤–µ—Ç, —è –ø–æ–º–æ–≥—É —Ç–µ–±–µ —É–∑–Ω–∞—Ç—å –ø–æ–≥–æ–¥—É –≤ —Ç–≤–æ–µ–º –≥–æ—Ä–æ–¥–µ! ‚õàÔ∏è\n\n\
        üå°Ô∏è –ß—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—É –≤ —Å–≤–æ–µ–º –≥–æ—Ä–æ–¥–µ –Ω–∞–∂–º–∏ /Temperature\n\
        üìù –ß—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω—ã–π –ø—Ä–æ–≥–Ω–æ–∑, –Ω–∞–∂–º–∏ /Details\n\
        üïë –ß—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –¥–Ω—è, –Ω–∞–∂–º–∏ /Time",
        reply_markup=keyboard)


@dp.message_handler(commands=["Temperature"])
async def get_weather(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /Temperature

    Args:
        message (types.Message): —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        state (FSMContext): —Å–æ—Å—Ç–æ—è–Ω–∏–µ –±–æ—Ç–∞
    """
    await bot.send_message(message.chat.id, "üåÜ –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞:")
    await state.set_state(WeatherType.temperature)


@dp.message_handler(commands=["Details"])
async def get_details(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /Details

    Args:
        message (types.Message): —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        state (FSMContext): —Å–æ—Å—Ç–æ—è–Ω–∏–µ –±–æ—Ç–∞
    """
    await bot.send_message(message.chat.id, "üåÜ –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞:")
    await state.set_state(WeatherType.details)


@dp.message_handler(commands=["Time"])
async def get_time(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /Time

    Args:
        message (types.Message): —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        state (FSMContext): —Å–æ—Å—Ç–æ—è–Ω–∏–µ –±–æ—Ç–∞
    """
    await bot.send_message(message.chat.id, "üåÜ –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞:")
    await state.set_state(WeatherType.time)


@dp.message_handler(state=WeatherType.temperature)
async def get_temp_by_city(message: types.Message, state: FSMContext):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã –≤ –≥–æ—Ä–æ–¥–µ

    Args:
        message (types.Message): —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è c –Ω–∞–∑–≤–∞–Ω–∏–µ–º –≥–æ—Ä–æ–¥–∞
        state (FSMContext): —Å–æ—Å—Ç–æ—è–Ω–∏–µ –±–æ—Ç–∞
    """
    try:
        r = requests.get(
            f"https://api.openweathermap.org/data/2.5/weather?q={message.text}&appid={open_weather_token}&units=metric"
        )
        data = r.json()

        city = data['name']
        cur_temp = data['main']['temp']

        await message.reply(f"[{datetime.datetime.now().strftime('%Y-%m-%d %H:%M')}]\n"
                            f"‚ùÑÔ∏è –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≤ –≥–æ—Ä–æ–¥–µ {city}: {cur_temp}C\n")
        await state.finish()

    except Exception as e:
        print(e)
        await message.reply("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –Ω–∞–ø–∏—Å–∞–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è –≥–æ—Ä–æ–¥–∞.")
        await state.set_state(WeatherType.temperature)


@dp.message_handler(state=WeatherType.details)
async def get_details_by_city(message: types.Message, state: FSMContext):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–¥—Ä–æ–±–Ω–æ–≥–æ –ø—Ä–æ–≥–Ω–æ–∑–∞ –ø–æ–≥–æ–¥—ã –≤ –≥–æ—Ä–æ–¥–µ

    Args:
        message (types.Message): —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è c –Ω–∞–∑–≤–∞–Ω–∏–µ–º –≥–æ—Ä–æ–¥–∞
        state (FSMContext): —Å–æ—Å—Ç–æ—è–Ω–∏–µ –±–æ—Ç–∞
    """
    try:
        r = requests.get(
            f"https://api.openweathermap.org/data/2.5/weather?q={message.text}&appid={open_weather_token}&units=metric"
        )
        data = r.json()

        city = data['name']
        cur_temp = data['main']['temp']
        humidity = data['main']['humidity']
        pressure = data['main']['pressure']
        wind = data['wind']['speed']

        await message.reply(f"[{datetime.datetime.now().strftime('%Y-%m-%d %H:%M')}]\n"
                            f"‚ùÑÔ∏è –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≤ –≥–æ—Ä–æ–¥–µ {city}: {cur_temp}C\n"
                            f"üíß –í–ª–∞–∂–Ω–æ—Å—Ç—å: {humidity}%\n"
                            f"üå¨Ô∏è –°–∫–æ—Ä–æ—Å—Ç—å –≤–µ—Ç—Ä–∞: {wind} –º/—Å\n"
                            f"üå°Ô∏è –î–∞–≤–ª–µ–Ω–∏–µ: {pressure} –º–º.—Ä—Ç.—Å—Ç.\n")
        await state.finish()

    except Exception as e:
        print(e)
        await message.reply("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –Ω–∞–ø–∏—Å–∞–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è –≥–æ—Ä–æ–¥–∞.")
        await state.set_state(WeatherType.details)


@dp.message_handler(state=WeatherType.time)
async def get_time_by_city(message: types.Message, state: FSMContext):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –≤–æ—Å—Ö–æ–¥–∞ –∏ –∑–∞–∫–∞—Ç–∞ —Å–æ–ª–Ω—Ü–∞ –≤ –≥–æ—Ä–æ–¥–µ

    Args:
        message (types.Message): —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è c –Ω–∞–∑–≤–∞–Ω–∏–µ–º –≥–æ—Ä–æ–¥–∞
        state (FSMContext): —Å–æ—Å—Ç–æ—è–Ω–∏–µ –±–æ—Ç–∞
    """
    try:
        r = requests.get(
            f"https://api.openweathermap.org/data/2.5/weather?q={message.text}&appid={open_weather_token}&units=metric"
        )
        data = r.json()

        city = data['name']
        sunrise_timestamp = data['sys']['sunrise']
        sunset_timestamp = data['sys']['sunset']

        sunrise_time = datetime.datetime.fromtimestamp(sunrise_timestamp)
        sunset_time = datetime.datetime.fromtimestamp(sunset_timestamp)

        await message.reply(f"[{datetime.datetime.now().strftime('%Y-%m-%d %H:%M')}]\n"
                            f"üåÜ –ì–æ—Ä–æ–¥: {city}\n"
                            f"üåÖ –í–æ—Å—Ö–æ–¥ —Å–æ–ª–Ω—Ü–∞: {sunrise_time.strftime('%H:%M')}\n"
                            f"üåá –ó–∞–∫–∞—Ç —Å–æ–ª–Ω—Ü–∞: {sunset_time.strftime('%H:%M')}\n")
        await state.finish()

    except Exception as e:
        print(e)
        await message.reply("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –Ω–∞–ø–∏—Å–∞–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è –≥–æ—Ä–æ–¥–∞.")
        await state.set_state(WeatherType.time)


if __name__ == '__main__':
    executor.start_polling(dp)